/* tslint:disable */
/* eslint-disable */
/**
 * Pulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMonitorPayload,
  ErrorResponse,
  Monitor,
} from '../models/index';
import {
    CreateMonitorPayloadFromJSON,
    CreateMonitorPayloadToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MonitorFromJSON,
    MonitorToJSON,
} from '../models/index';

export interface CreateMonitorRequest {
    createMonitorPayload: CreateMonitorPayload;
}

export interface DeleteMonitorRequest {
    id: string;
}

export interface GetMonitorByIdRequest {
    id: string;
}

/**
 * MonitorApi - interface
 * 
 * @export
 * @interface MonitorApiInterface
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Create Monitor
     * @param {CreateMonitorPayload} createMonitorPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    createMonitorRaw(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Monitor>>;

    /**
     * Create Monitor
     */
    createMonitor(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Monitor>;

    /**
     * 
     * @summary Delete Monitor
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    deleteMonitorRaw(requestParameters: DeleteMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Monitor
     */
    deleteMonitor(requestParameters: DeleteMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get Monitor by ID
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getMonitorByIdRaw(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Monitor>>;

    /**
     * Get Monitor by ID
     */
    getMonitorById(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Monitor>;

    /**
     * 
     * @summary List Monitors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    listMonitorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Monitor>>>;

    /**
     * List Monitors
     */
    listMonitors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Monitor>>;

}

/**
 * 
 */
export class MonitorApi extends runtime.BaseAPI implements MonitorApiInterface {

    /**
     * Create Monitor
     */
    async createMonitorRaw(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters['createMonitorPayload'] == null) {
            throw new runtime.RequiredError(
                'createMonitorPayload',
                'Required parameter "createMonitorPayload" was null or undefined when calling createMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitors`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMonitorPayloadToJSON(requestParameters['createMonitorPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     * Create Monitor
     */
    async createMonitor(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Monitor> {
        const response = await this.createMonitorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Monitor
     */
    async deleteMonitorRaw(requestParameters: DeleteMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitors/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Monitor
     */
    async deleteMonitor(requestParameters: DeleteMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMonitorRaw(requestParameters, initOverrides);
    }

    /**
     * Get Monitor by ID
     */
    async getMonitorByIdRaw(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMonitorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitors/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     * Get Monitor by ID
     */
    async getMonitorById(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Monitor> {
        const response = await this.getMonitorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Monitors
     */
    async listMonitorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Monitor>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitors`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonitorFromJSON));
    }

    /**
     * List Monitors
     */
    async listMonitors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Monitor>> {
        const response = await this.listMonitorsRaw(initOverrides);
        return await response.value();
    }

}
