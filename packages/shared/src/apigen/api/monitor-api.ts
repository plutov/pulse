/* tslint:disable */
/* eslint-disable */
/**
 * Pulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateMonitorPayload } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { Monitor } from '../models';
/**
 * MonitorApi - axios parameter creator
 * @export
 */
export const MonitorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Monitor
         * @param {CreateMonitorPayload} createMonitorPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMonitor: async (createMonitorPayload: CreateMonitorPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMonitorPayload' is not null or undefined
            assertParamExists('createMonitor', 'createMonitorPayload', createMonitorPayload)
            const localVarPath = `/monitors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMonitorPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Monitor
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitor: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMonitor', 'id', id)
            const localVarPath = `/monitors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Monitor by ID
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMonitorById', 'id', id)
            const localVarPath = `/monitors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Monitors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonitors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonitorApi - functional programming interface
 * @export
 */
export const MonitorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MonitorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Monitor
         * @param {CreateMonitorPayload} createMonitorPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMonitor(createMonitorPayload: CreateMonitorPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Monitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMonitor(createMonitorPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MonitorApi.createMonitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Monitor
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMonitor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMonitor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MonitorApi.deleteMonitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Monitor by ID
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonitorById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Monitor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonitorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MonitorApi.getMonitorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Monitors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMonitors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Monitor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMonitors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MonitorApi.listMonitors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MonitorApi - factory interface
 * @export
 */
export const MonitorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MonitorApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Monitor
         * @param {CreateMonitorPayload} createMonitorPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMonitor(createMonitorPayload: CreateMonitorPayload, options?: RawAxiosRequestConfig): AxiosPromise<Monitor> {
            return localVarFp.createMonitor(createMonitorPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Monitor
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitor(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMonitor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Monitor by ID
         * @param {string} id Monitor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Monitor> {
            return localVarFp.getMonitorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Monitors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonitors(options?: RawAxiosRequestConfig): AxiosPromise<Array<Monitor>> {
            return localVarFp.listMonitors(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MonitorApi - interface
 * @export
 * @interface MonitorApi
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Create Monitor
     * @param {CreateMonitorPayload} createMonitorPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    createMonitor(createMonitorPayload: CreateMonitorPayload, options?: RawAxiosRequestConfig): AxiosPromise<Monitor>;

    /**
     * 
     * @summary Delete Monitor
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    deleteMonitor(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get Monitor by ID
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getMonitorById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Monitor>;

    /**
     * 
     * @summary List Monitors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    listMonitors(options?: RawAxiosRequestConfig): AxiosPromise<Array<Monitor>>;

}

/**
 * MonitorApi - object-oriented interface
 * @export
 * @class MonitorApi
 * @extends {BaseAPI}
 */
export class MonitorApi extends BaseAPI implements MonitorApiInterface {
    /**
     * 
     * @summary Create Monitor
     * @param {CreateMonitorPayload} createMonitorPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public createMonitor(createMonitorPayload: CreateMonitorPayload, options?: RawAxiosRequestConfig) {
        return MonitorApiFp(this.configuration).createMonitor(createMonitorPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Monitor
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public deleteMonitor(id: string, options?: RawAxiosRequestConfig) {
        return MonitorApiFp(this.configuration).deleteMonitor(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Monitor by ID
     * @param {string} id Monitor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getMonitorById(id: string, options?: RawAxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getMonitorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Monitors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public listMonitors(options?: RawAxiosRequestConfig) {
        return MonitorApiFp(this.configuration).listMonitors(options).then((request) => request(this.axios, this.basePath));
    }
}

