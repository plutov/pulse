openapi: 3.0.0
info:
  title: Pulse API
  description: ""
  version: 0.0.0
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: User Login
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginBody"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /monitors:
    get:
      tags:
        - monitor
      security:
        - BearerAuth: []
      summary: List Monitors
      operationId: listMonitors
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Monitor"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - monitor
      security:
        - BearerAuth: []
      summary: Create Monitor
      operationId: createMonitor
      requestBody:
        $ref: "#/components/requestBodies/CreateMonitorBody"
      responses:
        "201":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /monitors/{id}:
    get:
      tags:
        - monitor
      security:
        - BearerAuth: []
      summary: Get Monitor
      operationId: getMonitor
      parameters:
        - $ref: "#/components/parameters/MonitorId"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - monitor
      security:
        - BearerAuth: []
      summary: Delete Monitor
      operationId: deleteMonitor
      parameters:
        - $ref: "#/components/parameters/MonitorId"
      responses:
        "204":
          description: Monitor deleted successfully
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /runs:
    get:
      tags:
        - monitor
      security:
        - BearerAuth: []
      summary: Get Monitor Runs
      operationId: listMonitorRuns
      parameters:
        - $ref: "#/components/parameters/MonitorIdQuery"
        - $ref: "#/components/parameters/Size"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorRunsList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /charts/timeSeries:
    post:
      tags:
        - charts
      security:
        - BearerAuth: []
      summary: Get Time Series Chart Data
      operationId: getTimeSeriesChartData
      requestBody:
        $ref: "#/components/requestBodies/TimeSeriesChartBody"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSeriesChartData"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ValidationMessage:
      required:
        - message
        - type
      type: object
      properties:
        message:
          type: string
        type:
          type: string
        path:
          type: array
          items:
            type: string
    ErrorResponse:
      required:
        - statusCode
        - message
        - validationMessages
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        validationMessages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
    WithId:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
    WithName:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    MonitorType:
      type: string
      enum:
        - http
    WithMonitorType:
      required:
        - monitorType
      type: object
      properties:
        monitorType:
          $ref: "#/components/schemas/MonitorType"
    WithCreatedAt:
      required:
        - createdAt
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
    WithUpdatedAt:
      required:
        - updatedAt
      type: object
      properties:
        updatedAt:
          type: string
          format: date-time
    User:
      allOf:
        - $ref: "#/components/schemas/WithId"
        - $ref: "#/components/schemas/WithUsername"
    WithAuthor:
      required:
        - author
      type: object
      properties:
        author:
          $ref: "#/components/schemas/User"
    MonitorConfig:
      oneOf:
        - $ref: "#/components/schemas/HttpConfig"
    HttpConfig:
      required:
        - url
        - method
      type: object
      properties:
        url:
          type: string
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - HEAD
            - OPTIONS
            - PATCH
    WithConfig:
      type: object
      required:
        - config
      properties:
        config:
          $ref: "#/components/schemas/MonitorConfig"
    WithSchedule:
      required:
        - schedule
      type: object
      properties:
        schedule:
          type: string
          description: Cron-like schedule string
          example: "* * * * *"
    MonitorStatus:
      type: string
      enum:
        - active
        - paused
    WithStatus:
      required:
        - status
      type: object
      properties:
        status:
          $ref: "#/components/schemas/MonitorStatus"
    Monitor:
      allOf:
        - $ref: "#/components/schemas/WithId"
        - $ref: "#/components/schemas/WithName"
        - $ref: "#/components/schemas/WithMonitorType"
        - $ref: "#/components/schemas/WithCreatedAt"
        - $ref: "#/components/schemas/WithUpdatedAt"
        - $ref: "#/components/schemas/WithAuthor"
        - $ref: "#/components/schemas/WithSchedule"
        - $ref: "#/components/schemas/WithStatus"
        - $ref: "#/components/schemas/WithConfig"
    MonitorMinimal:
      allOf:
        - $ref: "#/components/schemas/WithId"
        - $ref: "#/components/schemas/WithName"
    WithMonitorMinimal:
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/MonitorMinimal"
    CreateMonitorPayload:
      allOf:
        - $ref: "#/components/schemas/WithName"
        - $ref: "#/components/schemas/WithMonitorType"
        - $ref: "#/components/schemas/WithSchedule"
        - $ref: "#/components/schemas/WithStatus"
        - $ref: "#/components/schemas/WithConfig"
    WithUsername:
      required:
        - username
      type: object
      properties:
        username:
          type: string
    WithPassword:
      required:
        - password
      type: object
      properties:
        password:
          type: string
    LoginPayload:
      allOf:
        - $ref: "#/components/schemas/WithUsername"
        - $ref: "#/components/schemas/WithPassword"
    WithToken:
      required:
        - token
      type: object
      properties:
        token:
          type: string
    LoginResponse:
      allOf:
        - $ref: "#/components/schemas/WithToken"
        - $ref: "#/components/schemas/WithUser"
    WithUser:
      required:
        - user
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
    MonitorsList:
      type: object
      required:
        - total
        - rows
      properties:
        total:
          type: integer
        rows:
          type: array
          items:
            $ref: "#/components/schemas/Monitor"
    MonitorRunsList:
      type: object
      required:
        - total
        - rows
      properties:
        total:
          type: integer
        rows:
          type: array
          items:
            $ref: "#/components/schemas/MonitorRun"
    WithRunStatus:
      required:
        - status
      type: object
      properties:
        status:
          $ref: "#/components/schemas/RunStatus"
    RunStatus:
      type: string
      enum:
        - success
        - failure
        - timeout
    WithDurationMs:
      required:
        - durationMs
      type: object
      properties:
        durationMs:
          type: integer
    WithMonitorRunDetails:
      required:
        - details
      type: object
      properties:
        details:
          $ref: "#/components/schemas/MonitorRunDetails"
    MonitorRunDetails:
      oneOf:
        - $ref: "#/components/schemas/HttpRunDetails"
    HttpRunDetails:
      required:
        - statusCode
      properties:
        statusCode:
          type: integer
    MonitorRun:
      allOf:
        - $ref: "#/components/schemas/WithId"
        - $ref: "#/components/schemas/WithCreatedAt"
        - $ref: "#/components/schemas/WithMonitorMinimal"
        - $ref: "#/components/schemas/WithRunStatus"
        - $ref: "#/components/schemas/WithDurationMs"
        - $ref: "#/components/schemas/WithMonitorRunDetails"
    ChartInterval:
      type: string
      enum:
        - 5m
        - 1h
        - 1d
        - 1w
        - 30d
    TimeSeriesChartPayload:
      required:
        - monitorIds
        - timeRange
        - interval
      type: object
      properties:
        monitorIds:
          type: array
          items:
            type: string
            format: uuid
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        interval:
          $ref: "#/components/schemas/ChartInterval"
        timeRange:
          $ref: "#/components/schemas/ChartInterval"
    TimeSeriesDataPoint:
      allOf:
        - $ref: "#/components/schemas/WithCreatedAt"
        - $ref: "#/components/schemas/WithRunStatus"
        - $ref: "#/components/schemas/WithDurationMs"
    WithDataPoints:
      required:
        - dataPoints
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesDataPoint"
    TimeSeriesMonitorData:
      allOf:
        - $ref: "#/components/schemas/WithMonitorMinimal"
        - $ref: "#/components/schemas/WithDataPoints"
    TimeSeriesChartData:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TimeSeriesMonitorData"
  requestBodies:
    LoginBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginPayload"
    CreateMonitorBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateMonitorPayload"
    TimeSeriesChartBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TimeSeriesChartPayload"
  responses:
    BadRequestError:
      description: "400"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnauthorizedError:
      description: "401"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFoundError:
      description: "404"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: "500"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  parameters:
    MonitorId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    MonitorIdQuery:
      name: monitorId
      in: query
      required: false
      schema:
        type: string
        format: uuid
    Size:
      name: size
      in: query
      required: false
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 1000
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
